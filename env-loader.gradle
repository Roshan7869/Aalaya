// Load environment variables from .env file
def loadEnvFile() {
    def envFile = file('.env')
    if (!envFile.exists()) {
        logger.warn('.env file not found, using default values')
        return [:]
    }
    
    def env = [:]
    envFile.eachLine { line ->
        if (line.startsWith('#') || line.trim().isEmpty()) {
            return // Skip comments and empty lines
        }
        
        def parts = line.split('=', 2)
        if (parts.length == 2) {
            def key = parts[0].trim()
            def value = parts[1].trim()
            
            // Remove quotes if present
            if ((value.startsWith('"') && value.endsWith('"')) || 
                (value.startsWith("'") && value.endsWith("'"))) {
                value = value.substring(1, value.length() - 1)
            }
            
            env[key] = value
        }
    }
    
    return env
}

// Function to get environment variable with fallback
def getEnvVar(String key, String fallback = '') {
    def env = loadEnvFile()
    return env[key] ?: System.getenv(key) ?: fallback
}

// Export function for use in build.gradle files
ext.getEnvVar = this.&getEnvVar
ext.loadEnvFile = this.&loadEnvFile

// Log configuration loading
logger.info('Environment configuration loaded successfully')

// Validate critical environment variables
def validateEnvVars() {
    def required = ['API_BASE_URL_PROD', 'MAPBOX_ACCESS_TOKEN_PROD']
    def missing = []
    
    required.each { key ->
        if (getEnvVar(key).isEmpty()) {
            missing.add(key)
        }
    }
    
    if (!missing.isEmpty()) {
        logger.warn("Missing required environment variables: ${missing.join(', ')}")
        logger.warn('Please create a .env file with all required variables')
    }
}

// Validate on script load
validateEnvVars()